package rules

import com.sample.DroolsTest.*;
import com.agency.*;



rule "Place Chosen"
	salience 20000
	when
		Fact(name("chosen"), value(true))
	then
		Communication.showMessage("chosen");
		drools.halt();
end

rule "You need money dude"
	salience 20000
	when
		Fact(name("max_price"), intValueLessThan(200))
	then
		Communication.showMessage("we_need_more_money_dude");
		drools.halt();
end

rule "No place Chosen"
	salience -1
	when
	then
		Communication.showMessage("not_chosen");
		drools.halt();
end



rule "Ask seaside"
	when
		Fact(name("max_price"), intValueGreaterThan(500))
		not
		(and
			Fact(name("mountains"), value(true))
			Fact(name("poland"), value(true))
		)
	then
		Communication.askQuestion("seaside");
end

rule "Ask mountains"
	when
		Fact(name("max_price"), intValueGreaterThan(400))
		not
		(and
			Fact(name("seaside"), value(true))
			Fact(name("poland"), value(true))
		)
	then
		Communication.askQuestion("mountains");
end

rule "Ask sightseeing"
	when
		(or
			Fact(name("objazd"), value(true))
			Fact(name("active"), value(false))
		)
		not( exists Fact(name("sightseeing")))
	then
		Communication.askQuestion("sightseeing");
end

rule "Ask exotic"
	when
		Fact(name("max_price"), intValueGreaterThan(2500))
	then
		Communication.askQuestion("exotic");
end

rule "Ask fear_earthquakes"
	when
		Fact(name("exotic"), value(true))
	then
		Communication.askQuestion("fear_earthquakes");
end

rule "Ask orient"
	when
		Fact(name("max_price"), intValueGreaterThan(5000))
		not Fact(name("poland"), value(true))
		not Fact(name("south_america"), value(true))
		not Fact(name("africa"), value(true))
		Fact(name("long_flight"), value(true))
		Fact(name("exotic"), value(true))
		Fact(name("fear_earthquakes"), value(false))
	then
		Communication.askQuestion("orient");
end

rule "Ask max price"
	salience 2
	when
	then
		Communication.askQuestion("max_price");
end


rule "Ask South America"
	when
		Fact(name("exotic"), value(true))
		not Fact(name("africa"), value(true))
		not Fact(name("poland"), value(true))
		Fact(name("long_flight"), value(true))
	then
		Communication.askQuestion("south_america");
end

rule "Ask Africa"
	when
		Fact(name("exists"), value(true))
		not Fact(name("south_america"), value(true))
		not Fact(name("poland"), value(true))
	then
		Communication.askQuestion("africa");
end


rule "Ask poland"
	when
		(or
			Fact(name("exotic"), value(false))
			Fact(name("max_price"), intValueLessThan(1500))
		)
		not( exists Fact(name("poland")))
	then
		Communication.askQuestion("poland");
end



rule "Ask jungle"
	when
		Fact(name("max_price"), intValueGreaterThan(3000))
		Fact(name("active"), value(true))
		Fact(name("exotic"), value(true))
		not Fact(name("poland"), value(true))
		not Fact(name("canoeing"), value(true))
		not Fact(name("skiing"), value(true))
	then
		Communication.askQuestion("jungle");
end

rule "Ask active"
	when
		Fact(name("max_price"), intValueGreaterThan(400))
	then
		Communication.askQuestion("active");
end

rule "Ask objazd"
	when
		Fact(name("max_price"), intValueGreaterThan(600))
		Fact(name("active"), value(true))
		not Fact(name("canoeing"), value(true))
		not Fact(name("skiing"), value(true))
	then
		Communication.askQuestion("objazd");
end


rule "Ask surfing"
	salience 1
	when
		Fact(name("max_price"), intValueGreaterThan(1500))
		Fact(name("active"), value(true))
		Fact(name("seaside"), value(true))
		not Fact(name("objazd"), value(true))
		not Fact(name("jungle"), value(true))
		not Fact(name("climbing"), value(true))
		not Fact(name("canoeing"), value(true))
	then
		Communication.askQuestion("surfing");
end


rule "Ask climbing"
	salience 1
	when
		Fact(name("max_price"), intValueGreaterThan(500))
		Fact(name("active"), value(true))
		Fact(name("mountains"), value(true))
		not Fact(name("objazd"), value(true))
		not Fact(name("skiing"), value(true))
	then
		Communication.askQuestion("climbing");
end

rule "Ask skiing"
	salience 1
	when
		Fact(name("max_price"), intValueGreaterThan(700))
		Fact(name("active"), value(true))
		Fact(name("mountains"), value(true))
		not Fact(name("objazd"), value(true))
		not Fact(name("skiing"), value(true))
	then
		Communication.askQuestion("skiing");
end

rule "Ask water_skiing"
	salience 1
	when
		(or
			Fact(name("skiing"), value(true))
			Fact(name("mountains"), value(false))
		)
		Fact(name("active"), value(true))
		Fact(name("seaside"), value(true))
		not Fact(name("objazd"), value(true))
		not Fact(name("climbing"), value(true))
		not Fact(name("sightseeing"), value(true))
		not( exists Fact(name("water_skiing")))
	then
		Communication.askQuestion("water_skiing");
end

rule "Ask canoeing"
	salience 1
	when
		Fact(name("active"), value(true))
		not Fact(name("objazd"), value(true))
		not Fact(name("sightseeing"), value(true))
		not Fact(name("skiing"), value(true))
		not Fact(name("climbing"), value(true))
		not Fact(name("orient"), value(true))
	then
		Communication.askQuestion("canoeing");
end

rule "Ask long_flight"
	salience 1
	when
		not Fact(name("poland"), value(true))
		Fact(name("max_price"), intValueGreaterThan(2000))
		(or
			Fact(name("active"), value(true))
			Fact(name("sightseeing"), value(true))
			Fact(name("exotic"), value(true))
		)
		not(
			exists Fact(name("long_flight"))
		)
	then
		Communication.askQuestion("long_flight");
end




